extends header

block content

    style(type="text/css").

        #last_downloads li{
            padding:3px; 
        }

        #last_downloads li:hover{
            cursor: pointer;
            background: #337ab738;
            border-radius:3px;
        }

        #container_last_downloads{
            border: 1px solid;
            background: #eeeeee7d;
            padding: 5px;
            border-radius: 3px;
            margin: 10px 2px;
        }

  
    script(type="text/javascript").
  
        $(document).ready(function(){

            let uuid = ''
            
            const socket = io()

            socket.on('connect', () => {
                alertify.success('Web Socket Conectado')
                console.log(socket)
            })

            socket.on('msg', (msg) => {
                if(msg == 'finish'){
                    console.log('SOCKET IO FINALIZADO')
                    alertify.success('Processamento Finalizado')
                    mostraStatus()
                }
            })

            let totalPromises = 0

            socket.on('item_upload_batch_finish', (msg) => {

                console.log('socket on item finish')
                console.log(msg)

                let backColor = '#dff0d8c4'
                document.getElementById(msg).style.background = backColor

                totalPromises--

                if(totalPromises == 0){

                    console.log('All Uploads Finished')

                    $('#date_time_upload_batch').text($('#date_time_upload_batch').text() + '\n Fim: ' + new Date().toLocaleString())

                    $('#status_upload_batch').text('Finalizado !')

                    let promise = $.ajax({
                        url: 'save_upload_batch',
                        type: 'POST',
                        data: {
                            date_created: new Date(),
                            uuid: uuid
                        }
                    })

                    promise.then((result) => {

                        loadLastUploadsBatch()

                    })

                }

            })

            var lastUUID = ''

            function loadLastUploadsBatch(){

                $('#last_downloads').html('')

                let promise = $.ajax({
                    url: 'get_last_5_uploads_batch'
                })

                promise.then((results) => {

                    console.log('Ultimos Uploads em Lote')
                    
                    results.forEach((uploadItem, uploadIndex) => {

                        let uuid = uploadItem.uuid
                        let dateCreated = new Date(uploadItem.date_created).toLocaleString()

                        $('#last_downloads').append('<li><a>' + dateCreated + '<br><span>' + uuid + '</span></a></li>')

                    })

                })
            }

            loadLastUploadsBatch()


            $('#last_downloads').on('click', 'li', (e) => {

                let uuid = e.target.getElementsByTagName('span')[0].innerText.trim()
                let url = 'get_download_upload_batch/' + uuid
                
                let promise = $.ajax({
                    url: url,
                    contentType: false,
                    processData: false,
                        xhrFields: {
                        responseType: 'blob'
                    },
                })

                promise.then((result) => {
                    console.log('Download Finished')

                    loadLastUploadsBatch()

                    var blob = new Blob([result], {type: "application/zip"});
                    saveAs(blob, "batch_ocr.zip");

                })
            })

            $("#file_doc").change(function() {

                var files = [];
                for (var i = 0; i < $(this).get(0).files.length; ++i) {
                    files.push($(this).get(0).files[i].name);
                }
                
                $('#files').html('')
                files.forEach((value, index) => {
                    $('#files').append('<p>'+value+'</p>')
                })

            })

             $("#file_doc_v3").change(function() {

                var files = [];
                for (var i = 0; i < $(this).get(0).files.length; ++i) {
                    files.push($(this).get(0).files[i].name);
                }
                
                $('#files_v3').html('')
                files.forEach((value, index) => {
                    $('#files_v3').append('<p id="'+value+'">'+value+'</p>')
                })

            })

            //- $('#btn_enviar').click((e)=> {
            //-     e.preventDefault()

            //-     var promises = [];
            //-     var objFiles = $('#file_doc').get(0).files

            //-     var lenFiles = objFiles.length

            //-     for (var i = 0; i < lenFiles; ++i) {

            //-         let file = objFiles[i].name

            //-         // Monta um objeto FormData com os arquivos
            //-         let formData = new FormData();
            //-         formData.append('file_doc', file);
            //-         formData.append('socket_id', socket.id)
                    
            //-         // Envia ajax para processar o upload
            //-         let promise = $.ajax({
            //-             url: 'process_ocr',
            //-             type: 'POST',
            //-             data: formData,
            //-             contentType: false,
            //-             enctype: 'multipart/form-data',
            //-             processData: false
            //-         })

            //-         files.push(promise)
            //-     }

            //-     Promise.all(promises).then(() => {

            //-         console.log('All Uploads Finished')

            //-     })

            //- })

            

            $('#frm_upload_doc').submit(function(e){

                e.preventDefault()

                // Recupera os arquivos do input file
                var file = $('#file_doc')[0].files[0]

                if(file == undefined){
                    alertify.error('Selecione um arquivo JPEG/TIFF')
                }
                else{

                    alertify.success('Iniciando processamento OCR', 10)

                    // Monta um objeto FormData com os arquivos
                    var formData = new FormData();
                    formData.append('file_doc', file);
                    formData.append('socket_id', socket.id)

                    $('#ocr_result').text('Processando OCR ...')
                    
                    // Envia ajax para processar o upload
                    var promise = $.ajax({
                        url: 'process_ocr',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        enctype: 'multipart/form-data',
                        processData: false
                    })
                    
                    promise.then(function (result) {
                        
                        //- console.log("============================")
                        //- console.log(response)
                        //- $('#ocr_result').text(response)

                        lastUUID = result
                        $('#ocr_result').text(JSON.stringify(result))

                    })

                }

            })

            $('#frm_upload_doc_v2').submit(function(e){

                e.preventDefault()

                // Recupera os arquivos do input file
                var file = $('#file_doc_v2')[0].files[0]

                console.log(file)

                if(file == undefined){
                    alertify.error('Selecione um arquivo JPEG/TIFF')
                }
                else{

                    alertify.success('Iniciando processamento OCR', 10)

                    // Monta um objeto FormData com os arquivos
                    var formData = new FormData();
                    formData.append('file_doc_v2', file);
                    formData.append('socket_id', socket.id)

                    $('#ocr_result').text('Processando OCR ...')
                    
                    // Envia ajax para processar o upload
                    var promise = $.ajax({
                        url: 'process_ocr_v2',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        enctype: 'multipart/form-data',
                        processData: false
                    })
                    
                    promise.then(function (result) {
                        
                        //- console.log("============================")
                        //- console.log(response)
                        //- $('#ocr_result').text(response)

                        lastUUID = result
                        $('#ocr_result').text(JSON.stringify(result))
                        //- $('#ocr_result').text(result)

                    })

                }

            })

            $('#frm_upload_doc_v3').submit(function(e){

                e.preventDefault()

                var promises = [];
                var objFiles = $('#file_doc_v3').get(0).files

                if(objFiles == undefined){
                    alertify.error('Selecione um arquivo JPEG/TIFF')
                }
                else{

                    $('#date_time_upload_batch').text('Inicio: ' + new Date().toLocaleString())
                    $('#status_upload_batch').text('Processando ...')

                    uuid = window.uuid()

                    var lenFiles = objFiles.length

                    for (var i = 0; i < lenFiles; ++i) {

                        let file = objFiles[i]

                        //- console.log(file)
                        
                        // Monta um objeto FormData com os arquivos
                        let formData = new FormData();
                        formData.append('file_doc', file);
                        formData.append('socket_id', socket.id)
                        formData.append('uuid', uuid)
                        
                        // Envia ajax para processar o upload
                        let promise = new Promise((resolve, reject) => {
                            
                            let promiseAjax = $.ajax({
                                url: 'process_ocr_v3',
                                type: 'POST',
                                data: formData,
                                contentType: false,
                                enctype: 'multipart/form-data',
                                processData: false,
                                beforeSend: function(jqXHR){
                                    jqXHR.postData = formData
                                }
                            })

                            promiseAjax.done((fileName) => {
                            
                                //- let backColor = '#dff0d8c4'
                                //- document.getElementById(fileName).style.background = backColor

                                resolve()

                            })
                            .fail((jqXHR, textStatus, errorThrown) => {

                                console.log('Error CATCHED')
                                console.log(jqXHR.postData.get('file_doc'))
                                
                                //- let fileName = jqXHR.postData.get('file_doc').name
                                //- let backColor = '#ffcdd2'

                                //- document.getElementById(fileName).style.background = backColor

                                resolve()

                            })

                        })

                        promises.push(promise)
                    }

                    console.log(promises.length)

                    totalPromises = promises.length

                    Promise.all(promises).then(() => {

                        //- console.log('All Uploads Finished')

                        //- $('#date_time_upload_batch').text($('#date_time_upload_batch').text() + '\n Fim: ' + new Date().toLocaleString())

                        //- $('#status_upload_batch').text('Finalizado !')

                        //- let promise = $.ajax({
                        //-     url: 'save_upload_batch',
                        //-     type: 'POST',
                        //-     data: {
                        //-         date_created: new Date(),
                        //-         uuid: uuid
                        //-     }
                        //- })

                        //- promise.then((result) => {

                        //-     loadLastUploadsBatch()

                        //- })

                    })

                }

            })

            $('#frm_process_ocr').submit(function(e){

                e.preventDefault()

                var data = $(this).serialize();

                console.log(data)

                var promise = $.ajax({
                    url: 'process_ocr',
                    type: 'POST',
                    data: data
                })

                promise.then(function(result){
                    lastUUID = result
                    $('#ocr_result').text(JSON.stringify(result))
                })

            })

            function mostraStatus(e){

                let _url = 'status_ocr/'+lastUUID._uuid

                var promise = $.ajax({
                    url: _url,
                    type: 'GET'
                })

                promise.then(function(result){

                    var texto = '<pre>'
                    texto += JSON.stringify(result, null, 4)
                    texto += '</pre>'

                    $('#status_ocr_result').text('')
                    $('#status_ocr_result').append(texto)

                    $('#ocr_pretty_result').text('')

                    result.ocr.ocr.forEach((ocrItem, ocrIndex) => {

                        var texto = '<pre>'
                        texto += "=> OCR Data: <br><br>"
                        texto += String(ocrItem.ocrData) + '<br><br>'
                        texto += "=> resPageIndex: <br><br>"
                        texto += ocrItem.resPageIndex + "<br><br>"
                        texto += "=> Name: <br><br>"
                        texto += ocrItem.name + "<br><br>"
                        texto += '</pre><br>'
                        $('#ocr_pretty_result').append(texto)

                    })

                    let url =  'get_pdf/' + lastUUID._uuid

                    //- console.log(url)

                    $.ajax({
                        url: url,
                        method: "GET",
                        contentType: false,
                        processData: false,
                         xhrFields: {
                            responseType: 'blob'
                        },
                        //- headers:{
                        //-     'Content-Type':'application/pdf'
                        //- }
                    }).then(function(data) {

                        if(data.length < 100){
                            console.log('sem urls')
                        }
                        else{

                            console.log(data)

                            var blob=new Blob([data], { type: 'application/pdf' })

                            var fileURL = URL.createObjectURL(blob);
                            showPDF(fileURL)

                            //- window.open(fileURL);

                        }
                    });

                })
            }


            // ### PDF JS ###################################

            var __PDF_DOC,
            __CURRENT_PAGE,
            __TOTAL_PAGES,
            __PAGE_RENDERING_IN_PROGRESS = 0,
            __CANVAS = $('#pdf-canvas').get(0),
            __CANVAS_CTX = __CANVAS.getContext('2d');

            function showPDF(pdf_url) {
                $("#pdf-loader").show();

                PDFJS.getDocument({ url: pdf_url }).then(function(pdf_doc) {
                    __PDF_DOC = pdf_doc;
                    __TOTAL_PAGES = __PDF_DOC.numPages;
                    
                    // Hide the pdf loader and show pdf container in HTML
                    $("#pdf-loader").hide();
                    $("#pdf-contents").show();
                    $("#pdf-total-pages").text(__TOTAL_PAGES);

                    // Show the first page
                    showPage(1);
                }).catch(function(error) {
                    // If error re-show the upload button
                    $("#pdf-loader").hide();
                    $("#upload-button").show();
                    
                    alert(error.message);
                });;
            }

            function showPage(page_no) {
                __PAGE_RENDERING_IN_PROGRESS = 1;
                __CURRENT_PAGE = page_no;

                // Disable Prev & Next buttons while page is being loaded
                $("#pdf-next, #pdf-prev").attr('disabled', 'disabled');

                // While page is being rendered hide the canvas and show a loading message
                $("#pdf-canvas").hide();
                $("#page-loader").show();

                // Update current page in HTML
                $("#pdf-current-page").text(page_no);
                
                // Fetch the page
                __PDF_DOC.getPage(page_no).then(function(page) {
                    // As the canvas is of a fixed width we need to set the scale of the viewport accordingly
                    var scale_required = __CANVAS.width / page.getViewport(1).width;

                    // Get viewport of the page at required scale
                    var viewport = page.getViewport(scale_required);

                    // Set canvas height
                    __CANVAS.height = viewport.height;

                    var renderContext = {
                        canvasContext: __CANVAS_CTX,
                        viewport: viewport
                    };
                    
                    // Render the page contents in the canvas
                    page.render(renderContext).then(function() {
                        __PAGE_RENDERING_IN_PROGRESS = 0;

                        // Re-enable Prev & Next buttons
                        $("#pdf-next, #pdf-prev").removeAttr('disabled');

                        // Show the canvas and hide the page loader
                        $("#pdf-canvas").show();
                        $("#page-loader").hide();
                    });
                });
            }

            // Previous page of the PDF
            $("#pdf-prev").on('click', function() {
                if(__CURRENT_PAGE != 1)
                    showPage(--__CURRENT_PAGE);
            });

            // Next page of the PDF
            $("#pdf-next").on('click', function() {
                if(__CURRENT_PAGE != __TOTAL_PAGES)
                    showPage(++__CURRENT_PAGE);
            });

            
        })
    
    div(id="app")
        div(class="container")
            div(class="jumbotron jumbotron-fluid")
                h2(class="display-4") SandBox OCR - DokIA
                p(class="lead") Ambiente de testes para Upload de PDF
            hr
            //- a(class='btn btn-info' href='get_all_files'  target='_blank') Listar Urls dos Textos
            div(style="float:left;width:45%")
                h3 Metodo Upload do Computador
                form(method="post" id="frm_upload_doc" enctype="multipart/form-data")
                    //- input(class='form-control' type='file' name='file_doc' id='file_doc' accept=".jpg,.jpeg,.png,.tiff")
                    input(class='form-control' type='file' name='file_doc' id='file_doc' accept=".pdf")
                    br
                    input(class='btn btn-success' type='submit' value='enviar' id='btn_enviar')
                br
                div(id="files")
                br
                h3 Metodo Upload do Computador (Nova Versão)
                form(method="post" id="frm_upload_doc_v2" enctype="multipart/form-data")
                    //- input(class='form-control' type='file' name='file_doc' id='file_doc' accept=".jpg,.jpeg,.png,.tiff")
                    input(class='form-control' type='file' name='file_doc_v2' id='file_doc_v2' accept=".pdf")
                    br
                    input(class='btn btn-success' type='submit' value='enviar' id='btn_enviar_v2')
                br
                div(id="files")
            div(style="float:right;width:50%")
                h3 Metodo por URL Externa
                form(method="post" id="frm_process_ocr")
                    input(class="form-control" type="text" id="urlFile" name="urlFile")
                    br
                    input(class='btn btn-success' type='submit' value='enviar' id='btn_enviar_ocr')
                    br
                    br
                h3 Metodo Upload do Computador (Somente OCR com multipla seleção)
                form(method="post" id="frm_upload_doc_v3" enctype="multipart/form-data")
                    //- input(class='form-control' type='file' name='file_doc' id='file_doc' accept=".jpg,.jpeg,.png,.tiff")
                    input(class='form-control' type='file' name='file_doc_v3' id='file_doc_v3' accept=".pdf" multiple)
                    br
                    h4(id='status_upload_batch')
                    strong(id='date_time_upload_batch')
                    div(id="container_last_downloads")
                        h5 Ultimos Uploads
                        ul(id='last_downloads')
                    input(class='btn btn-success' type='submit' value='enviar' id='btn_enviar_v3')
                br
                div(id="files_v3")
            div(style="clear:both")
            br
            hr
            h3 PDF.js para visualizacao do documento
            div(id="pdf-main-container")
                div(id="pdf-loader") Loading document ...
                div(id="pdf-contents")
                    div(id="pdf-meta")
                        div(id="pdf-buttons")
                            button(id="pdf-prev") Previous
                            button(id="pdf-next") Next
                        div(id="page-count-container") Page 
                            div(id="pdf-current-page") of 
                                div(id="pdf-total-pages")
                    canvas(id="pdf-canvas" width="400")
                    div(id="page-loader") Loading page ...
            h3 Status Processamento Full
            br
            pre(id='ocr_result')
            br
            div(id='status_ocr_container' style="width:48%;float:left") 
                strong Original JSON Response
                div(id='status_ocr_result')
            div(id="ocr_pretty_container" style="width:48%;float:right") 
                strong OCR Pretty
                div(id='ocr_pretty_result')
            br